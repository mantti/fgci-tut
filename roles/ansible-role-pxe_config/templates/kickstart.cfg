# {{ ansible_managed }}
# based to {{ hostvars[item].inventory_hostname }}
# basics
text
skipx
cmdline
{% if hostvars[item].vnc_password is defined and (hostvars[item].vnc_password|length >= 6 and hostvars[item].vnc_password|length <= 8) %}
vnc --password={{ hostvars[item].vnc_password }}
#{% else %}
#vnc
{% endif %}
install
reboot
firstboot --disable
{% if hostvars[item].yum_proxy is defined %}
url --url="{{ hostvars[item].repo_location }}" --proxy={{ hostvars[item].yum_proxy }}
{% else %}
url --url="{{ hostvars[item].repo_location }}"
{% endif %}

# localization
lang en_GB
keyboard fi
timezone --utc Europe/Helsinki

# repos
{% if hostvars[item].repos is defined %}
{% for repo in hostvars[item].repos %}
{% if hostvars[item].yum_proxy is defined %}
repo --name="{{ repo.name }}" --baseurl="{{ repo.url }}" --proxy={{ hostvars[item].yum_proxy }}
{% else %}
repo --name="{{ repo.name }}" --baseurl="{{ repo.url }}"
{% endif %}
{% endfor %}
{% endif %}

# network

network --onboot=yes --bootproto=dhcp --device={{ hostvars[item].internal_interface }} --noipv6
{% if hostvars[item].external_interface is defined %}
network --onboot={{hostvars[item].enable_ext_nic}} --device={{ hostvars[item].external_interface }} --bootproto=static --ip={{ hostvars[item].ext_ip_addr }} --netmask={{ hostvars[item].ext_net_mask }} --nameserver={{hostvars[item].nameserver1}} --hostname={{ hostvars[item].fqdn }} --gateway={{hostvars[item].ext_gateway }} --noipv6
{% endif %}

# firewall
firewall --enabled --service=ssh

{% if hostvars[item].central_log_host is defined %}
# Logging
logging --host={{ hostvars[item].central_log_host|replace("@","") }}
{% endif %}

# authentication
rootpw --iscrypted {{ rootpwhash }}
authconfig --useshadow --passalgo=sha512 --kickstart
selinux --disabled

# disks
{{ hostvars[item].kickstart_partitions }}

%packages 
@core
vim-enhanced
openssh-clients
{{ hostvars[item].kickstart_packages }}
%end

{% if hostvars[item].kickstart_pre_option is defined %}
{% if hostvars[item].kickstart_extra_pre_commands is defined %}
################################################################################
{{ hostvars[item].kickstart_pre_option }}
{{ hostvars[item].kickstart_extra_pre_commands }}
%end
{% endif %}
{% endif %}

################################################################################

%post --log=/root/post-ks-log


{% if hostvars[item].extdefroute is defined %}
/usr/bin/sed -i 's/DEFROUTE=yes/DEFROUTE=no/g' /etc/sysconfig/network-scripts/ifcfg-{{ hostvars[item].internal_interface }}
/usr/bin/sed -i 's/DEFROUTE=no/DEFROUTE=yes/g' /etc/sysconfig/network-scripts/ifcfg-{{ hostvars[item].external_interface }}
{% endif %}

/usr/bin/yum clean all
/usr/bin/yum update -y --skip-broken
/usr/bin/yum -y -q install ansible

/usr/bin/mkdir /root/.ssh && /usr/bin/chmod 700 /root/.ssh
{% if hostvars[item].root_keys is defined %}
{% for root_key in hostvars[item].root_keys %} 
/usr/bin/echo "{{ root_key }}" >> /root/.ssh/authorized_keys
{% endfor %}
{% endif %}
/usr/bin/chmod 600 /root/.ssh/authorized_keys

{% if hostvars[item].distro == "centos_7" %}
/usr/bin/systemctl stop NetworkManager.service
/usr/bin/systemctl disable NetworkManager.service
{% endif %}

{% if hostvars[item].ansible_pull_kickstart == true %}
# Only run ansible-pull if ansible_pull_kickstart is true
echo "Grabbing ansible-pull-script.sh"
/usr/bin/curl http://{{ kickstart_server_ip }}/ansible-pull-script.sh > /usr/local/bin/ansible-pull-script.sh
if [ $? == 0 ]; then
# Run ansible-pull-script.sh after every reboot
# rc.local is not recommended by CentOS7, instead it's a custom systemd script
# ansible-pull anyway can't run in the chroot during kickstart
/usr/bin/ansible -m cron -a "name='ansible-pull' user=root job='/bin/bash /usr/local/bin/ansible-pull-script.sh >/var/log/ansible-pull.ks.log 2>&1' minute="*/15" cron_file=ansible-pull" localhost
chmod +x /etc/rc.local
echo '/bin/bash /usr/local/bin/ansible-pull-script.sh -n >/var/log/ansible.boot.log 2>&1' >>/etc/rc.local
else
echo "could not get /usr/local/bin/ansible-pull-script.sh from http://{{ kickstart_server_ip }}/ansible-pull-script.sh"
fi
{% endif %}

{% if hostvars[item].kickstart_extra_post_commands is defined %}
{{ hostvars[item].kickstart_extra_post_commands }}
{% endif %}

# Remove " rhgb quiet" from all hosts
perl -pi -e 's/(.*) rhgb quiet(.*)/$1$2/g' /etc/default/grub

{% if serial_console_enable == true %}
# Set GRUB_TERMINAL="console serial"
perl -pi -e 's/GRUB_TERMINAL(.*)/GRUB_TERMINAL="console serial"/g' /etc/default/grub

# Add serial stuff to GRUB_CMDLINE_LINUX
grep console=ttyS0 /etc/default/grub >/dev/null
if [ $? -ne 0 ];then
    perl -pi -e 's/GRUB_CMDLINE_LINUX=(.*)"/GRUB_CMDLINE_LINUX=$1 console=tty0 console=ttyS0,115200"/g' /etc/default/grub
fi

# Add GRUB_SERIAL_COMMAND
grep GRUB_SERIAL_COMMAND /etc/default/grub >/dev/null
if [ $? -ne 0 ];then
    echo 'GRUB_SERIAL_COMMAND="serial --speed=115200"' >> /etc/default/grub
fi

if [ -d /sys/firmware/efi ];then
    /usr/sbin/grub2-mkconfig -o /boot/efi/EFI/centos/grub.cfg
else
    /usr/sbin/grub2-mkconfig -o /boot/grub2/grub.cfg
fi
{% endif %}

%end
#
